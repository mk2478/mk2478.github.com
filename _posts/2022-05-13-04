---
title: 파이썬 기초 2.5 [수식화,간략화]
categories: [Python]
comments: true
---

# 수식화,간략화의 중요성

전 글에서, 나는 
**현상을 재현하는 것보다, 현상을 수식화 간략화해서 구현하는것이 더 중요하다**
라고 말을 했었다.

이건 파이썬 뿐만 아니라 다른 프로그래밍 언어에서도 굉장히 중요한 부분을 차지한다.
설명을 위해 파이썬 코드를 하나 짜보도록 하자.

**문제**
``
가위바위보를 위한 코드를 작성하라. 단, p1과 p2(Player 1,2)의 입력을 받으며, 코드로는 그 둘중 누가 이겼는지 확인하는 코드로 한다.
``
자 그럼 이걸 보고 어떤 생각이 들었는가?
아마 if를 여러 개 사용해서 만들어서 경우의 수를 전부 계산하는 그런 방식을 생각했을 것이다.
코드로 치면....
```python
p1 = input("선공 (가위,바위,보로 입력해주세요.)")  
p2 = input("후공 (가위,바위,보로 입력해주세요.)")  
if p1 == "가위":  
    if p2 == "가위":  
        print("비겼습니다!")  
    if p2 == "바위":  
        print("p2가 이겼습니다!")  
    if p2 == "보":  
        print("p1이 이겼습니다!")  
if p1 == "바위":  
    if p2 == "가위":  
        print("p1이 이겼습니다!")  
    if p2 == "바위":  
        print("비겼습니다!")  
    if p2 == "보":  
        print("p2가 이겼습니다!")  
if p1 == "보":  
    if p2 == "가위":  
        print("p2가 이겼습니다!")  
    if p2 == "바위":  
        print("p1이 이겼습니다!")  
    if p2 == "보":  
        print("비겼습니다!")
```
이런 코드가 제일 먼저 생각이 날 것이다.
물론, 문제 해결은 됐다. 하지만, 이런 방식은 아까도 말했듯, 1차적인 방법이고, 결국 한계에 부딛히게된다.

> 가위바위보는 경우의 수가 9개 뿐이지만,
> 만약 경우의 수가 9개가 아닌 18개, 27개 혹은 그 이상의 수십 수백개로 늘어나게 된다면?

이런 문제에 맞닥뜨리게 된다.
결국 코딩이라는 건, 컴퓨터라는 "계산기"를 입맛에 맞게 커스터마이즈 하는 것이다.
컴퓨터는 결국 "계산기"라는걸 잊지 말아야 한다.

다시 본제로 돌아와서, 그럼 어떻게 이 가위바위보라는 걸 간략하고 정해진 수식을 넣어서 만들 수 있을까.

위의 코드를 다시 한번 보자.
결국 if if 의 반복이다. 다만, 안의 내용물이 p1 p2에 따라 달라질 뿐이다.
그렇다면,
**p1이 정해짐으로 경우의 수가 3개로 줄어드는데 그걸 이용할 수 없을까?** 라는 것에 초점을 맞춰보자.
만약 p1이 가위라면?
p2 :
가위 = 비긴다
보 = 진다
바위 = 이긴다
만약 p1이 보 라면?
가위 = 이긴다
보 = 비긴다
바위 = 진다.

뭔가 규칙성이 보이지 않는가?
가위 보 바위 순서대로 했을 때,
각각을 0 1 2 라고 넣어보고 생각해보자.
만약 p1이 1이라면,
p2도 1부터 비김, 짐, 이김 순서다.
p1이 2라면?
p2도 2부터 비김 짐 이김 순서다.

규칙이 발견됐다면 이걸 코드로 밀어넣으면 된다.
```python
p1 = input("선공 (가위,바위,보)")  
p2 = input("후공 (가위,바위,보)")  
result = ["비겼습니다!","p1이 이겼습니다!","p2가 이겼습니다!"]  
rsp = ["가위","보","바위"]  
cac = {}  
if p1 == "가위":  
    a = 0  
elif p1 == "보":  
    a = 1  
elif p1 == "바위":  
    a = 2  
x = 0  
while x < 3:  
    cac[rsp[(a+x)%3]] = x  
    x = x+1  
print(result[cac[p2]])
```

위에서 말했던, 가위 보 바위 순으로 0 1 2를 지정하고,
가위 보 바위 순서대로 cac이라는 딕셔너리 자료형에,
p1과 같은걸 0, 그다음을 1, 그다음을 2 라는 값을 value로, 가위, 보, 바위 를 key로 저장하게끔 만든 코드다.

설명이 어려울지도 모르지만, 이런식으로 수식을 만들어 적용할경우, 코드 줄 수도 줄어들 뿐더러, 일일이 경우의 수를 지정하지 않아도 된다는 편안함까지 생긴다.
처음엔 어렵겠지만, 이렇게 해결하는 버릇을 한번 들여보자.
코딩의 세계가 좀 더 넓게 보일 것이다.
